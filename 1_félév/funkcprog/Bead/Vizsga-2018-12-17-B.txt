Próbavizsga
Előzetes tudnivalók

Használható segédanyagok:

    Haskell könyvtárak dokumentációja,
    Hoogle,
    a tárgy honlapja, és a
    Haskell szintaxis összefoglaló.

Ha bármilyen kérdés, észrevétel felmerül, azt a felügyelőknek kell jelezni, nem a diáktársaknak!

A feladatok tetszőleges sorrendben megoldhatóak. A pontozás szabályai a következők:

    Minden teszten átmenő megoldás ér teljes pontszámot.
    Funkcionálisan hibás (csak 1-2 teszteseten megbukó) megoldás nem teljes pontszámot ér.
    Fordítási hibás vagy hiányzó megoldás nem ér pontot.

Tekintve, hogy a tesztesetek, bár odafigyelés mellett íródnak, nem fedik le minden esetben a függvény teljes működését, határozottan javasolt még külön próbálgatni a megoldásokat beadás előtt, vagy megkérdezni a felügyelőket!
1. modDiv (1 pont)

Add meg két természetes szám egymással vett egész osztásának maradékát, és annak eredményét is egy rendezett párban! A pár első komponense legyen a maradék, a második pedig az eredmény.

modDiv :: Int -> Int -> (Int,Int)

modDiv 10 5 == (0,2)
modDiv 11 5 == (1,2)
modDiv 7 7  == (0,1)
modDiv 7 8  == (7,0)
modDiv 7 1  == (0,7)

2. swapFirstTwo (1 pont)

Cseréld meg egy lista első két elemét! Amennyibben a listának nincs legalább két eleme, úgy hagyd változatlanul!

swapFirstTwo :: [a] -> [a]

swapFirstTwo []             == []
swapFirstTwo [1]            == [1]
swapFirstTwo [1,2]          == [2,1]
swapFirstTwo [1..10]        == [2,1] ++ [3..10]
take 5 (swapFirstTwo [1..]) == [2,1] ++ [3..5]

3. swapFirstTwos (2 pont)

Cseréld meg egy listában lévő összes listának az első két elemét!

swapFirstTwos :: [[a]] -> [[a]]

swapFirstTwos []               == []
swapFirstTwos [[]]             == [[]]
swapFirstTwos [[1]]            == [[1]]
swapFirstTwos [[1,2]]          == [[2,1]]
swapFirstTwos [[1,2], [3,4]]   == [[2,1], [4,3]]
swapFirstTwos [[1..10], [1,2]] == [[2,1] ++ [3..10], [2,1]]

4. isPalindrome (2 pont)

Döntsd egy listáról, hogy palindrom-e! Egy lista pontosan akkor palindrom, ha megegyezik a megfordítottjával.

isPalindrome :: Eq a => [a] -> Bool

isPalindrome []        == True
isPalindrome [1]       == True
isPalindrome ['x']     == True
isPalindrome [1,1]     == True
isPalindrome [1,1,3]   == False
isPalindrome "madam"   == True
isPalindrome "racecar" == True
isPalindrome "eeve"    == False

5. palindromize (2 pont)

Alakíts palindrommá egy listát! Ehhez fűzd össze a megfordítottjával, de olyan módon, hogy a "középső" (azaz az eredeti lista utolsó) eleme ne legyen megduplázva (lásd tesztek).

palindromize :: [a] -> [a]

palindromize []     == []
palindromize [1]    == [1]
palindromize "x"    == "x"
palindromize "mad"  == "madam"
palindromize "race" == "racecar"

6. oddPlusOne (2 pont)

Definiáljuk az oddPlusOne függvényt, amely egy számokból álló lista összes páros elemét eltávolítja, a maradékhoz pedig hozzáad 1-et!

oddPlusOne :: [Int] -> [Int]

oddPlusOne [] == []
oddPlusOne [1..10] == [2,4,6,8,10]
oddPlusOne [1,4,7,8] == [2,8]

7. deleteAll (2 pont)

Töröld egy listából egy adott elem összes előfordulását!

deleteAll :: Eq a => a -> [a] -> [a]

deleteAll 5 []      == []
deleteAll 5 [5]     == []
deleteAll 5 [5,5]   == []
deleteAll 5 [1..10] == [1..4] ++ [6..10]
deleteAll 5 [1..4]  == [1..4]
deleteAll 'a' "almafa" == "lmf"

8. countEmpties (2 pont)

Számold meg, hogy hány darab üres lista van egy listában!

countEmpties :: [[a]] -> Int

countEmpties []                          == 0
countEmpties [""]                        == 1
countEmpties ["",""]                     == 2
countEmpties [[1..10],[],[5],[],[1..10]] == 2
countEmpties [[1..],[],[1..],[],[1..]]   == 2

9. onlyVowels (2 pont)

Válogasd ki egy String-ből az angol abécé magánhangzóit (e,u,i,o,a)!

Megjegyzés: Feltételezhetjük, hogy a kapott String-ben kizárólag kisbetűk szerepelnek.

onlyVowels :: String -> String

onlyVowels "" == ""
onlyVowels "x" == ""
onlyVowels "xxx" == ""
onlyVowels "a" == "a"
onlyVowels "euioa" == "euioa"
onlyVowels "jonathan" == "oaa"

10. heads (3 pont)

Vegyük listában lévő listáknak az első elemeit! Ha egy belső lista üres, akkor ugord át!

heads :: [[a]] -> [a]

heads []                       == []
heads [""]                     == []
heads [[1]]                    == [1]
heads [[1..10]]                == [1]
heads [[1..10],[2..10]]        == [1,2]
heads [[],[1..],[],[2..10],[]] == [1,2]

11. conditionalApply (2 pont)

Valósítsd meg a feltételes applikációt! Az első paramétere egy predikátum (logikai értékű függvény), a második pedig az alkalmazandó függvény. Amennyiben a kapott elemre igaz a predikátum, akkor alkalmazza rá a függvényt, egyébént adja vissza változatlanul.

conditionalApply :: (a -> Bool) -> (a -> a) -> a -> a

conditionalApply odd (*2) 1 == 2
conditionalApply odd (*2) 2 == 2
conditionalApply (==5) (+1) 5 == 6
conditionalApply (==5) (+1) 7 == 7
conditionalApply (=='a') (\_->'e') 'a' == 'e'

12. conditionalMap (3 pont)

Valósítsd meg conditionalMap függvényt! Ez a függvény nagyon hasonló a már megszokott map függvényhez. Annyiban különbözik tőle, hogy kap egy extra paramétert, egy feltétel függvényt. Pontosan akkor fogja alkalmazni a második paraméterként kapott függvényt a kapott értékre, ha arra a feltétel függvény igazat ad vissza (egyébként változatlanul hagyja).

conditionalMap :: (a -> Bool) -> (a -> a) -> [a] -> [a]

conditionalMap odd (*2) []     == []
conditionalMap odd (*2) [2]    == [2]
conditionalMap odd (*2) [1]    == [2]
conditionalMap odd (+1) [1,2]  == [2,2]
conditionalMap odd (+1) [1..6] == [2,2,4,4,6,6]
conditionalMap (=='a') (\_->'e') "almafa" == "elmefe"

13. isWeekend (2 pont)

Hozz létre egy Day adattípust, mely a hét napjait ábrázolja Mon, Tue, Wed, Thu, Fri, Sat, Sun adatkonstruktorokkal! Írj deriving (Eq,Show) záradékot hozzá!

Döntsd egy napról, hogy hétvégére esik-e!

isWeekend :: Day -> Bool

isWeekend Mon == False
isWeekend Wed == False
isWeekend Thu == False
isWeekend Sun == True

14. dayToInt (2 pont)

Alakíts egész számmá egy napot! A hétfőhöz 0-t, a keddhez 1-et, ... a vasárnaphoz pedig 6-ot rendeljen.

dayToInt :: Day -> Int

dayToInt Mon == 0
dayToInt Wed == 2
dayToInt Thu == 3
dayToInt Sun == 6

15. isEarlier (2 pont)

Döntsd el egy napról, hogy korábban van-e, mint egy másik!

isEarlier :: Day -> Day -> Bool

isEarlier Mon Mon == False
isEarlier Mon Tue == True
isEarlier Sun Sun == False
isEarlier Mon Sun == True