Házi feladat

A házi feladatot egy Homework4 nevű modulként kell beadni. Minden definiálandó függvényhez adjuk meg a hozzá tartozó típus szignatúrát is! A feladatok után a zárójelben lévő név azt jelzi, milyen néven kell definiálni az adott függvényt, kifejezést.
Összetett minták

Adjunk olyan x0, x1 és x2 kifejezéseket, amelyekre az alábbi függvény rendre 0-t, 1-t, illetve 2-t ad eredményül. Tehát adjuk meg az x0, x1 és x2 definícióit úgy, hogy f x0 == 0, f x1 == 1 és f x2 == 2 teljesüljenek. A megoldásba másoljuk bele az f definícióját is.

f :: [[(a,[b])]] -> Int
f [(x,xs):[y,ys]]            = 0
f ([_]:[(x,[xs])]:[y,ys]:[]) = 1
f ([(x,y:_:[])]:[])          = 2

Rekurzió

Adjuk meg azt a függvényt, amely egy stringet a betűíre darabol! Az eredmény egy olyan lista legyen, amiben az eredeti string egyes betűi szerepelnek string-ként.

letterize :: String -> [String]

Adjuk meg azt a függvényt, amely egy listában lévő listáknak megcseréli az első két elemét! Ha egy lista nem tartalmaz legalább két elemet, akkor eredeti állapotában adjuk azt vissza!

swapElems :: [[a]] -> [[a]]

Bónusz

Adjuk meg azt a függvényt, amely "összefésül" két listát, azaz az eredmény listában a két lista elemei lesznek váltakozva! Például: merge [1,3,5] [2,4] == [1,2,3,4,5].

merge :: [a] -> [a] -> [a]

Adjuk meg azt a függvényt, amely egy lista sorozat első elemeit eggyel jobbra tolja. Például: `shiftFirsts ["you","are","very","smart"] == ["ou","yre","aery","vmart"]. Az első lista elemét elég "törölni", az utolsó lista első elemét pedig nem kell tovább tolni. Ha egyetlen listát kapunk, akkor csak "töröljük" az első elemét.

shiftFirsts :: [[a]] -> [[a]]