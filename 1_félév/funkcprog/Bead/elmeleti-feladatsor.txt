
    Melyik HELYES kifejezés?
        6 div 3
        6 `div` 3
        6 (div) 3
        (6) div (3)

    Megoldás:
        syntax error (a függvény infix módon lett alkalmazva backtick-ek nélkül)
        SOLUTION
        syntax error (a függvény infix módon lett alkalmazva backtick-ek nélkül)
        syntax error (a függvény infix módon lett alkalmazva backtick-ek nélkül)
    Melyik HELYES kifejezés, ha f :: Int -> Int -> String -> Bool?
        f (1 2 "str") || True
        f (1 2 "str" || True)
        (f 1 2 "str") || True
        f(1,2,"str") || True

    Megoldás:
        (1 2 "str")-t a fordító egyetlen argumentumnak veszi, de az f hármat vár
        (1 2 "str" || True) j.o. nem helyes kifejezés
        SOLUTION
        függvény alkalmazás (nem Python-ban vagyunk)

    Melyik állítás HAMIS az alábbiak közül?

    f ([a]:[b])
    f (a:b:[])
    f ((a:[]):b:[])

        Az 1. és 3. minták ugyanarra illeszkednek
        Amire illeszkedik az 1. minta, arra illeszkedik a 2. minta is
        Amire illeszkedik az 2. minta, arra illeszkedik a 3. minta is
        A minták közül legalább egy illeszkedik a(z) [[],[]] értékre

    Let's desugar these patterns:

    f ([a]:[b])
      ~ f ([a]:(b:[]))    (desugaring)
      ~ f ((a:[]):(b:[])) (desugar)
      ~ f ((a:[]):b:[])   (because of fixity)
        f (a:b:[])
        f ((a:[]):b:[])

    Az első és harmadik minták azonosak.
    Ezek olyan kételemű listákra illeszkednek, amik listákat tartalmaznak, és az első elemük is lista.
    A második minta bármilyen kételemű listára illeszkedik.
        Igaz
        Igaz, mert a második minta általánosabb, több mindenre illeszkedik.
        SOLUTION: Hamis, mert a második minta általánosabb, több mindenre illeszkedik.
        Igaz, mert a második mintára illeszkedik.
    Melyik kifejezés NEM lista típusú?
        ([[1,2],[]])
        [(1,2),(3,4)]
        ([1,2]:[])
        ([1,2],[])

    Megoldás:
        List: ([[1,2],[]]) ~ [[1,2],[]]
        List
        List: ([1,2]:[]) ~ [1,2]:[]
        SOLUTION: Tuple
    Mi az eredménye a következő kifejezésnek: head [1,2,3] == take 1 [3,2,1]
        True
        False
        Fordítási idejű hiba
        Futási idejű hiba

    SOLUTION C, mert:

    head :: [a] -> a
    take :: Int -> [a] -> [a]
    (==) :: Eq a => a -> a -> a

    Nem lehet az (==)-t különböző típusú operandusokra alkalmazni.

    Melyik sor hagyható el a függvényből úgy, hogy működése változatlan maradjon?

    f [x,y] = x `min` y
    f [x] = x
    f (x:rest) = x `min` f rest

        Az első
        A második
        A harmadik
        Egyik sem

    SOLUTION A: Az elsőt, mert az illeszkedik a harmadikra:

      f [x,y] =(1)= f (x:[y]) =(2)= x `min` f [y] =(3)= x `min` y
      (1) - desugar arguments
      (2) - helyettesítsük a jobb oldalát a harmadik egyenletnek
      (3) - helyettesítsük a jobb oldalát `min`-nek a második egyenlet jobb oldalával

    Megjegyzés: A másik két minta közül egyik sem hagyható el.

    Mi lehet a típusa az alábbi kifejezésnek?

    map (filter (\x -> x))

        [a] -> [a]
        [Bool] -> [Bool]
        [[a]] -> [[a]]
        [[Bool]] -> [[Bool]]

    SOLUTION D mert:

    map :: (a -> b) -> [a] -> [b]
    filter :: (c -> Bool) -> [c] -> [c]
    (\x -> x) :: d -> d

    Vizsgáljuk meg, hogy mik lehetnek az egyes típusváltozók értékei:

    filter (\x -> x) azt jelenti, hogy (c -> Bool) egyenlő (d -> d)-vel. Tehát d ~ Bool és c ~ Bool. Innen pedig filter (\x -> x) :: [Bool] -> [Bool].

    Mivel a filter (\x -> x) az a függvényt, amit a map-nek odaadunk, ezért a -> b ~ [Bool] -> [Bool]. Innen: a ~ [Bool] és b ~ [Bool].

    Végül, map :: (a -> b) -> [a] -> [b] :: [[Bool]] -> [[Bool]].

    Mi lehet a típusa az alábbi függvénynek?

    f (x,xs) = init x
    f _ = "default"

        f :: [a] -> String
        f :: [String] -> String
        f :: (a,b) -> String
        f :: ([Char],a) -> [Char]

    SOLUTION D, mert:

    init :: [a] -> [a]
    "default" :: String ~ [Char]

    Ez azt jelenti, hogy f visszatérési értékének a típusa String (vagy [Char]).
    Tehát az init x típusának is [Char]-nak kell lennie.
    Ennek következményeként: x :: [Char].
    Végül az f egy Tuple-re van alklamzva, aminek első komponense x, és a második komponenséről nem tudunk semmit.
    Így f :: ([Char],a) -> [Char]

    Mi a típusa az alábbi függvénynek?

    f [] = []
    f [x] = [x]
    f [x:xs] = [xs]

        f :: [a] -> [a]
        f :: [[a]] -> [a]
        f :: [a] -> [[a]]
        f :: [[a]] -> [[a]]

    SOLUTION D, mert:

    A második sorból kiderül, hogy a f egyetlen argumentuménak és visszatérési értékének típusa azonos.
    Ez azt jelenti, hogy a megoldás csak az a A vagy a D lehet.
    Továbbá azt is észrevehetjük, hogy az utolsó minta egy oylan egyelmű listára illeszkedik, amelyben egy nemüres lista található.
    Ez azt jelenti, hogy az argumentum [[a]] típusú lesz.
    Ebből következik, hogy a megoldás a D.
    Mi az eredménye a következő kifejezésnek: zip [1..] "almafa"
        Nem áll le, nem ír ki semmit
        Nem áll le, végtelen eredményt ad
        Véges eredménnyel leáll
        Fordítási hiba

    SOLUTION C, mert zip mindig a rövidebbik lista végéig "zipzároz".
    Mi igaz a foldl (++) x ls és foldr (++) x ls kifejezésekre?
        Eredményük és futási költségük mindenképp azonos
        Eredményük és futási költségük azonos, ha ls véges és kiértékelhető
        Csak az egyik lehet típushelyes
        Típushelyesek, de eredményük vagy futási költségük eltérő lehet

    SOLUTION D, mert:

    A két kifejezés azonos eredményt ad, de futási költségük eltér.
    A kifejezések kizárólag a zárójelezésükben különböznek.

    Tekintsük az alábbi két kifejezést:
    ([1,2,3] ++ [3,4,5]) ++ [7,8,9]
    [1,2,3] ++ ([3,4,5] ++ [7,8,9])
    Az első egy foldl által előállított, a második pedig egy foldr általá előállított kifejezés.

    Az első kifejezésben az első listán kétszer megyünk végig.
    Egyszer, amik az első két lsitát fűzzük össze, és még egyszer, amikor az így kapott listát fűzzük össze a harmadik listával. (lásd a (++) definíciója).

    A második kifejezésben minden listán pontosan egyszer megyünk végig.
    Melyik kifejezés hoz létre helyes T típusú értéket, ha data T = A Int Bool | B String | C
        A "almafa"
        A True 3
        B 3
        C

    SOLUTION D, mert:

    A :: Int -> Bool -> T
    B :: String -> T
    C :: T

    Az A, B és C kifejezések mind típushibásak.
